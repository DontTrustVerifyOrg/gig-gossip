{
  "openapi": "3.0.1",
  "info": {
    "title": "GigGossipSettlerAPI",
    "version": "1.0"
  },
  "paths": {
    "/getcapricing": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Get pricing for specific country and currency",
        "description": "Returns the pricing details for a specific country and currency.",
        "operationId": "GetCaPricing",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "description": "Country",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Currency",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaPricingResult"
                }
              }
            }
          }
        }
      }
    },
    "/getcapublickey": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Public key of this Certification Authority.",
        "description": "Public key of this Certification Authority that can be used to validate signatures of e.g. issued certificates.",
        "operationId": "GetCaPublicKey",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/iscertificaterevoked": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Is the certificate revoked by this Certification Authority.",
        "description": "Returns true if the certificate has been revoked, false otherwise. Usefull to implement revocation list.",
        "operationId": "IsCertificateRevoked",
        "parameters": [
          {
            "name": "certid",
            "in": "query",
            "description": "Serial number of the certificate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResult"
                }
              }
            }
          }
        }
      }
    },
    "/gettoken": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Creates authorisation token guid",
        "description": "Creates a new token Guid that is used for further communication with the API",
        "operationId": "GetToken",
        "parameters": [
          {
            "name": "pubkey",
            "in": "query",
            "description": "public key identifies the API user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuidResult"
                }
              }
            }
          }
        }
      }
    },
    "/deletemypersonaluserdata": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Deletes My Personal Information.",
        "description": "Deletes My Personal Information.",
        "operationId": "DeleteMyPersonalUserData",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/addressautocomplete": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Autocompletes the address",
        "description": "Autocompletes the address.",
        "operationId": "AddressAutocomplete",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringArrayResult"
                }
              }
            }
          }
        }
      }
    },
    "/getroute": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Return route beetween two points",
        "description": "Return route beetween two points.",
        "operationId": "GetRoute",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromLat",
            "in": "query",
            "description": "Latitude of the first point",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "fromLon",
            "in": "query",
            "description": "Longitude of the first point",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "toLat",
            "in": "query",
            "description": "Latitude of the second point",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "toLon",
            "in": "query",
            "description": "Longitude of the second point",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteRetResult"
                }
              }
            }
          }
        }
      }
    },
    "/addressgeocode": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Finds the geolocation of the address",
        "description": "Finds the geolocation of the address.",
        "operationId": "AddressGeocode",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeolocationRetResult"
                }
              }
            }
          }
        }
      }
    },
    "/locationgeocode": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Finds the address of the location",
        "description": "Finds the address of the location.",
        "operationId": "LocationGeocode",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lat",
            "in": "query",
            "description": "Lat",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "lon",
            "in": "query",
            "description": "Lon",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/issuenewaccesscode": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Issuse new access code",
        "description": "Issuse new access code.",
        "operationId": "IssueNewAccessCode",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "length",
            "in": "query",
            "description": "Required length of the access code",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "singleUse",
            "in": "query",
            "description": "Is Single Use",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "validTillMin",
            "in": "query",
            "description": "Valid till",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Memo",
            "in": "query",
            "description": "Memo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/validateaccesscode": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Validate access code",
        "description": "Validate access code.",
        "operationId": "ValidateAccessCode",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Access code identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResult"
                }
              }
            }
          }
        }
      }
    },
    "/revokeaccesscode": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Revoke access code",
        "description": "Revoke access code.",
        "operationId": "RevokeAccessCode",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Access code identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/getmemofromaccesscode": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Get Memo from access code",
        "description": "Get Memo from access code.",
        "operationId": "GetMemoFromAccessCode",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Access code identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/giveuserproperty": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Grants a property to the subject.",
        "description": "Grants a property to the subject (e.g. driving licence). Only authorised users can grant the property.",
        "operationId": "GiveUserProperty",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pubkey",
            "in": "query",
            "description": "Public key of the subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Public value of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Secret value of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validHours",
            "in": "query",
            "description": "How long the property is valid in hours",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/getmypropertyvalue": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Gets My Property Value",
        "description": "Gets a property given to the subject. Only subject can read it.",
        "operationId": "GetMyPropertyValue",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/getmypropertysecret": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Gets My Property Secret",
        "description": "Gets a property secret given to the subject. Only subject can read it property.",
        "operationId": "GetMyPropertySecret",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/getuserpropertyvalue": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Gets User Property Value",
        "description": "Gets a property given to the subject. Only admin can read it.",
        "operationId": "GetUserPropertyValue",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pubkey",
            "in": "query",
            "description": "Pubkey of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/getuserpropertysecret": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Gets User Property Secret",
        "description": "Gets a property secret given to the subject. Only admin can read this property.",
        "operationId": "GetUserPropertySecret",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pubkey",
            "in": "query",
            "description": "Pubkey of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/giveuserfile": {
      "post": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Grants a file property to the subject.",
        "description": "Grants a file property to the subject (e.g. driving licence). Only authorised users can grant the property.",
        "operationId": "GiveUserFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "authToken",
                  "name",
                  "pubkey",
                  "secret",
                  "validHours",
                  "value"
                ],
                "type": "object",
                "properties": {
                  "authToken": {
                    "type": "string"
                  },
                  "pubkey": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "validHours": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "type": "string",
                    "format": "binary"
                  },
                  "secret": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "authToken": {
                  "style": "form"
                },
                "pubkey": {
                  "style": "form"
                },
                "name": {
                  "style": "form"
                },
                "validHours": {
                  "style": "form"
                },
                "value": {
                  "style": "form"
                },
                "secret": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/revokeuserproperty": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "description": "Revokes a property from the subject (e.g. driving licence is taken by the police). Only authorised users can revoke the property.",
        "operationId": "RevokeUserPropertyAsync",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pubkey",
            "in": "query",
            "description": "Public key of the subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/saveusertraceproperty": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Saves a trace to the subject.",
        "description": "Saves a trace, Only authorised users can grant the property.",
        "operationId": "SaveUserTraceProperty",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pubkey",
            "in": "query",
            "description": "Public key of the subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Public value of the property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/verifychannel": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Start verification of specific channel.",
        "description": "Starts verification of specific channel.",
        "operationId": "VerifyChannel",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pubkey",
            "in": "query",
            "description": "Public key of the subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Channel name (phone,email,...)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "Method (sms,call,message)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value of Channel for the method (phone number, email address).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/submitchannelsecret": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Submits the secret code for the channel.",
        "description": "Returns -1 if the secret is correct, otherwise the number of retires left is returned.",
        "operationId": "SubmitChannelSecret",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pubkey",
            "in": "query",
            "description": "Public key of the subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Channel name (phone,email,...)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "Method (sms,call,message)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value of Channel for the method (phone number, email address).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Secret received from the channel.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32Result"
                }
              }
            }
          }
        }
      }
    },
    "/ischannelverified": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Checks if the specific channel is verified",
        "description": "Checks if the specific channel is verified",
        "operationId": "IsChannelVerified",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user excluding the Subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pubkey",
            "in": "query",
            "description": "Public key of the subject.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Channel name (phone,email,...)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResult"
                }
              }
            }
          }
        }
      }
    },
    "/generatereplypaymentpreimage": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Generates new reply payment preimage and returns its hash.",
        "description": "Generates new reply payment preimage for the lightning network HODL invoice. This preimage is secret as long as the gig-job referenced by gigId is not marked as settled. The method returns hash of this preimage.",
        "operationId": "GenerateReplyPaymentPreimage",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gigId",
            "in": "query",
            "description": "gig-job identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "repliperPubKey",
            "in": "query",
            "description": "Public key of the replier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/generaterelatedpreimage": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Generates new payment preimage that is related to the given paymentHash and returns its hash..",
        "description": "Generates new reply payment preimage for the lightning network HODL invoice. Allows implementing payment chains. This preimage is secret as long as the gig-job referenced paymentHash is not marked as settled. The method returns hash of this preimage.",
        "operationId": "GenerateRelatedPreimage",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentHash",
            "in": "query",
            "description": "Payment hash of related HODL invoice.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/validaterelatedpaymenthashes": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Validates if given paymentHashes were generated by the same settler for the same gig.",
        "description": "Validates if given paymentHashes were generated by the same settler for the same gig. Allows implementing payment chains. The method returns true if the condition is met, false otherwise.",
        "operationId": "ValidateRelatedPaymentHashes",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentHash1",
            "in": "query",
            "description": "Payment hash of related HODL invoice.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentHash2",
            "in": "query",
            "description": "Payment hash of related HODL invoice.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResult"
                }
              }
            }
          }
        }
      }
    },
    "/revealsymmetrickey": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Reveals Symmetric Key",
        "description": "Reveals symmetric key for the communication",
        "operationId": "RevealSymmetricKey",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gigId",
            "in": "query",
            "description": "Gig ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "replierId",
            "in": "query",
            "description": "Replied Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/revealpreimage": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Reveals payment preimage of the specific paymentHash",
        "description": "Reveals payment preimage for the settlement of lightning network HODL invoice. This preimage is secret as long as the gig-job referenced paymentHash is not marked as settled.",
        "operationId": "RevealPreimage",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentHash",
            "in": "query",
            "description": "Payment hash of related HODL invoice.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/getgigstatus": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Gets status of the Gig and reveals symmetric key if available, that customer can use to decrypt the message from gig-worker.",
        "description": "Gets status of the Gig and reveals symmetric key if available, that customer can use to decrypt the message from gig-worker. This key is secret as long as the gig-job is not marked as accepted.",
        "operationId": "GetGigStatus",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signedRequestPayloadId",
            "in": "query",
            "description": "Request Payload Id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "repliperCertificateId",
            "in": "query",
            "description": "Replier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GigStatusKeyResult"
                }
              }
            }
          }
        }
      }
    },
    "/generaterequestpayload": {
      "post": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Genertes RequestPayload for the specific topic.",
        "description": "Genertes RequestPayload for the specific topic.",
        "operationId": "GenerateRequestPayload",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "authToken",
                  "properties",
                  "serialisedTopic"
                ],
                "type": "object",
                "properties": {
                  "authToken": {
                    "type": "string"
                  },
                  "properties": {
                    "type": "string"
                  },
                  "serialisedTopic": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "authToken": {
                  "style": "form"
                },
                "properties": {
                  "style": "form"
                },
                "serialisedTopic": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/generatesettlementtrust": {
      "post": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Genertes Settlement Trust used by the gig-worker to estabilish trusted primise with the custmer.",
        "description": "Genertes Settlement Trust used by the gig-worker to estabilish trusted primise with the custmer.",
        "operationId": "GenerateSettlementTrust",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "authToken",
                  "message",
                  "properties",
                  "replyinvoice",
                  "signedRequestPayloadSerialized"
                ],
                "type": "object",
                "properties": {
                  "authToken": {
                    "type": "string"
                  },
                  "properties": {
                    "type": "string"
                  },
                  "replyinvoice": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string",
                    "format": "binary"
                  },
                  "signedRequestPayloadSerialized": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "authToken": {
                  "style": "form"
                },
                "properties": {
                  "style": "form"
                },
                "replyinvoice": {
                  "style": "form"
                },
                "message": {
                  "style": "form"
                },
                "signedRequestPayloadSerialized": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/encryptjobreplyforcertificateid": {
      "post": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Encrypts the object using public key related to the specific certioficate id.",
        "description": "Encrypts the object using public key related to the specific certioficate id.",
        "operationId": "EncryptJobReplyForCertificateId",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "certificateId",
                  "objectSerialized"
                ],
                "type": "object",
                "properties": {
                  "certificateId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "objectSerialized": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "certificateId": {
                  "style": "form"
                },
                "objectSerialized": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/opendispute": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Allows opening dispute by the user.",
        "description": "Allows opening dispute by the user. After opening, the dispute needs to be solved positively before the HODL invoice timeouts occure. Otherwise all the invoices and payments will be cancelled.",
        "operationId": "OpenDispute",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverPublicKey",
            "in": "query",
            "description": "Driver pubkey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Reason",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gigId",
            "in": "query",
            "description": "Gig-job identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repliercertificateId",
            "in": "query",
            "description": "CertificateId of the replier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stripeClientSecret",
            "in": "query",
            "description": "Payment client secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/managedispute": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Allows opening and closing disputes.",
        "description": "Allows opening and closing disputes. After opening, the dispute needs to be solved positively before the HODL invoice timeouts occure. Otherwise all the invoices and payments will be cancelled.",
        "operationId": "ManageDispute",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gigId",
            "in": "query",
            "description": "Gig-job identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "repliperCertificateId",
            "in": "query",
            "description": "CertificateId of the replier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "open",
            "in": "query",
            "description": "True to open/False to close dispute.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/cancelgig": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Cancels existing gig",
        "description": "Allows cancelling existing gig. The gig can be cancelled only if the gig-job is not marked as settled.",
        "operationId": "CancelGig",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorisation token for the communication. This is a restricted call and authToken needs to be the token of the authorised user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gigId",
            "in": "query",
            "description": "Gig-job identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "repliperCertificateId",
            "in": "query",
            "description": "CertificateId of the replier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "GigGossipSettlerAPI"
        ],
        "summary": "Health check endpoint",
        "description": "This endpoint returns a status 200 and 'ok' to indicate that the service is running properly.",
        "operationId": "Health",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BooleanResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CaPricing": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "chargeMiliPercent": {
            "type": "integer",
            "format": "int64"
          },
          "chargeFlatCents": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "CaPricingResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaPricing"
              }
            ]
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeolocationRet": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GeolocationRetResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeolocationRet"
              }
            ]
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GigStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Open",
          "Accepted",
          "Cancelled",
          "Disuputed",
          "Completed"
        ],
        "x-ms-enum": {
          "name": "GigStatus",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "Open"
            },
            {
              "value": 1,
              "name": "Accepted"
            },
            {
              "value": 2,
              "name": "Cancelled"
            },
            {
              "value": 3,
              "name": "Disuputed"
            },
            {
              "value": 4,
              "name": "Completed"
            }
          ]
        }
      },
      "GigStatusKey": {
        "required": [
          "jobReplyId",
          "jobRequestId",
          "status",
          "symmetricKey"
        ],
        "type": "object",
        "properties": {
          "jobRequestId": {
            "type": "string",
            "format": "uuid"
          },
          "jobReplyId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GigStatus"
              }
            ],
            "x-enumNames": [
              "Open",
              "Accepted",
              "Cancelled",
              "Disuputed",
              "Completed"
            ],
            "x-ms-enum": {
              "name": "GigStatus",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Open"
                },
                {
                  "value": 1,
                  "name": "Accepted"
                },
                {
                  "value": 2,
                  "name": "Cancelled"
                },
                {
                  "value": 3,
                  "name": "Disuputed"
                },
                {
                  "value": 4,
                  "name": "Completed"
                }
              ]
            }
          },
          "symmetricKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GigStatusKeyResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GigStatusKey"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GuidResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "uuid"
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Int32Result": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreimageReveal": {
        "required": [
          "paymentHash",
          "preimage"
        ],
        "type": "object",
        "properties": {
          "paymentHash": {
            "type": "string",
            "nullable": true
          },
          "preimage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Result": {
        "type": "object",
        "properties": {
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RouteRet": {
        "type": "object",
        "properties": {
          "distance": {
            "type": "number",
            "format": "double"
          },
          "duration": {
            "type": "number",
            "format": "double"
          },
          "geometry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeolocationRet"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RouteRetResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteRet"
              }
            ]
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SettlerErrorCode": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Ok",
          "InvalidToken",
          "PropertyNotGranted",
          "UnknownCertificate",
          "UnknownPreimage",
          "OperationFailed",
          "AccessDenied",
          "NotFound",
          "InvoiceProblem",
          "NotSupportedCountryCurrencyPair"
        ],
        "x-ms-enum": {
          "name": "SettlerErrorCode",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "Ok"
            },
            {
              "value": 1,
              "name": "InvalidToken"
            },
            {
              "value": 2,
              "name": "PropertyNotGranted"
            },
            {
              "value": 3,
              "name": "UnknownCertificate"
            },
            {
              "value": 4,
              "name": "UnknownPreimage"
            },
            {
              "value": 5,
              "name": "OperationFailed"
            },
            {
              "value": 6,
              "name": "AccessDenied"
            },
            {
              "value": 7,
              "name": "NotFound"
            },
            {
              "value": 8,
              "name": "InvoiceProblem"
            },
            {
              "value": 9,
              "name": "NotSupportedCountryCurrencyPair"
            }
          ]
        }
      },
      "StringArrayResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlerErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "PropertyNotGranted",
              "UnknownCertificate",
              "UnknownPreimage",
              "OperationFailed",
              "AccessDenied",
              "NotFound",
              "InvoiceProblem",
              "NotSupportedCountryCurrencyPair"
            ],
            "x-ms-enum": {
              "name": "SettlerErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "PropertyNotGranted"
                },
                {
                  "value": 3,
                  "name": "UnknownCertificate"
                },
                {
                  "value": 4,
                  "name": "UnknownPreimage"
                },
                {
                  "value": 5,
                  "name": "OperationFailed"
                },
                {
                  "value": 6,
                  "name": "AccessDenied"
                },
                {
                  "value": 7,
                  "name": "NotFound"
                },
                {
                  "value": 8,
                  "name": "InvoiceProblem"
                },
                {
                  "value": 9,
                  "name": "NotSupportedCountryCurrencyPair"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}