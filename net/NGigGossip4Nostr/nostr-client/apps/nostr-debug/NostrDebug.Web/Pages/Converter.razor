@page "/converter"
@page "/converter/{Bech32Key}"
@using Nostr.Client.Identifiers
@inject NavigationManager Navigation
@implements IDisposable

<Stack Orientation="Orientation.Vertical">

    <PageHeader Title="Converter" Subtitle="Conversion between Nostr key formats"></PageHeader>
    
    <h3>Bech32 <FluentIcon Name="@FluentIcons.ArrowsBidirectional" Size="@IconSize.Size20" Variant="@IconVariant.Regular" Color="@Color.Accent" /> Hex</h3>
    
    <div class="conversion-group">
        <Stack Orientation="Orientation.Vertical"
               HorizontalAlignment="StackHorizontalAlignment.Left"
               VerticalAlignment="StackVerticalAlignment.Top"
               VerticalGap="20" 
               HorizontalGap="20">
           
            <FluentTextField Style="width: 100%" Placeholder="npub1xxx" ValueExpression="() => Bech32Key" Value="@Bech32Key" @oninput="Bech32Set">
                <FluentIcon Name="@FluentIcons.Key" Slot="start" Size="@IconSize.Size16" Color="Color.Neutral" />
                <strong>Bech32 key</strong>
            </FluentTextField>
        
            <Stack Orientation="Orientation.Vertical" HorizontalGap="0" VerticalGap="0">
                <strong>Prefix</strong>
                <FluentCombobox Items="@_prefixes" Value="@_prefix" ValueChanged="@PrefixSet"></FluentCombobox>
            </Stack>

            <FluentTextField style="width: 100%" Placeholder="" ValueExpression="() => _hexKey" Value="@_hexKey" @oninput="HexSet">
                <FluentIcon Name="@FluentIcons.Key" Slot="start" Size="@IconSize.Size16" Color="Color.Neutral" Variant="IconVariant.Filled" />
                <strong>Hex key</strong>
            </FluentTextField>
        
            <Stack Orientation="Orientation.Vertical" VerticalGap="0">
                
                <p>Parsed identifier ↓↓</p>

                @if (_identifierKind != null)
                {
                    <p>
                        <strong>Kind</strong>
                        <div>@_identifierKind.ToString() (@((int)_identifierKind))</div>
                    </p>
                }

                @if (_identifier != null)
                {
                    <p>
                        <strong>Identifier</strong>
                        <div>@_identifier</div>
                    </p>
                }
                
                @if (_identifierEventId != null)
                {
                    <p>
                        <strong>Event</strong>
                        <div>@_identifierEventId</div>
                        <div><a class="clear-link" href="@ExternalLinks.GetLinkToEvent(_identifierEventId)" target="_blank">@ExternalLinks.FormatToNote(_identifierEventId)</a></div>
                    </p>
                }

                @if (_identifierPubkey != null)
                {
                    <p>
                        <strong>Author</strong>
                        <div>@_identifierPubkey</div>
                        <div><a class="clear-link" href="@ExternalLinks.GetLinkToProfile(_identifierPubkey)" target="_blank">@ExternalLinks.FormatToNpub(_identifierPubkey)</a></div>
                    </p>
                }

                @if (_identifierRelay != null)
                {
                    <p>
                        <strong>Relay</strong>
                        <div>@_identifierRelay</div>
                    </p>
                }
                
                @if (_identifierRelays != null)
                {
                    <p>
                        <strong>Relays</strong>
                        @foreach (var relay in _identifierRelays)
                        {
                            <div>@relay</div>
                        }
                    </p>
                }
                

            </Stack>

        </Stack>
    </div>

</Stack>

@code
{
    readonly string[] _prefixes = {
        "npub",
        "nsec",
        "note",
        "nprofile",
        "nevent",
        "nrelay",
        "naddr"
    };

    string? _prefix = "npub";
    string? _hexKey;

    string? _identifier;
    string? _identifierRelay;
    string[]? _identifierRelays;
    string? _identifierPubkey;
    string? _identifierEventId;
    NostrKind? _identifierKind;

    [Parameter]
    public string? Bech32Key { get; set; }

    public void Dispose()
    {
    }

    protected override void OnInitialized()
    {
        Bech32Set(new ChangeEventArgs { Value = Bech32Key });
    }

    private void Bech32Set(ChangeEventArgs args)
    {
        try
        {
            Bech32Key = (string?)args.Value;
            _hexKey = NostrConverter.ToHex(Bech32Key, out var hrp);
            _prefix = hrp ?? string.Empty;
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to parse bech32 key, error: {e.Message}");
        }

        DisplayIdentifier();
        SetUrlParam();
    }

    private void HexSet(ChangeEventArgs args)
    {
        try
        {
            _hexKey = (string?)args.Value;
            Bech32Key = NostrConverter.ToBech32(_hexKey, _prefix ?? "unknown");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to parse hex key, error: {e.Message}");
        }

        DisplayIdentifier();
        SetUrlParam();
    }

    private void PrefixSet(string? value)
    {
        try
        {
            _prefix = value ?? string.Empty;
            Bech32Key = NostrConverter.ToBech32(_hexKey, _prefix ?? "unknown");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to parse bech32 key, error: {e.Message}");
        }

        DisplayIdentifier();
        SetUrlParam();
    }

    private void SetUrlParam()
    {
        var newUrl = $"{Navigation.BaseUri.TrimEnd('/')}/converter/{Bech32Key}";
        Navigation.NavigateTo(newUrl, false, false);
    }

    private void DisplayIdentifier()
    {
        try
        {
            _identifierKind = null;
            _identifier = _identifierRelay = _identifierPubkey = _identifierEventId = null;
            _identifierRelays = null;

            var parsed = NostrIdentifierParser.Parse(Bech32Key);
            switch (parsed)
            {
                case NostrRelayIdentifier parsedRelay:
                    _identifierRelay = parsedRelay.Relay;
                    break;
                case NostrProfileIdentifier parsedProfile:
                    _identifierPubkey = parsedProfile.Pubkey;
                    _identifierRelays = parsedProfile.Relays;
                    break;
                case NostrEventIdentifier parsedEvent:
                    _identifierEventId = parsedEvent.EventId;
                    _identifierPubkey = parsedEvent.Pubkey;
                    _identifierRelays = parsedEvent.Relays;
                    _identifierKind = parsedEvent.Kind;
                    break;
                case NostrAddressIdentifier parsedAddress:
                    _identifier = parsedAddress.Identifier;
                    _identifierPubkey = parsedAddress.Pubkey;
                    _identifierRelays = parsedAddress.Relays;
                    _identifierKind = parsedAddress.Kind;
                    break;
            }
        }
        catch (Exception)
        {
            // ignore
        }
    }
}
