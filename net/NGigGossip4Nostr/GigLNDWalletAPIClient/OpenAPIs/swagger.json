{
  "openapi": "3.0.1",
  "info": {
    "title": "GigLNDWalletAPI",
    "version": "1.0"
  },
  "paths": {
    "/gettoken": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Generates a unique authorization token GUID for API access",
        "description": "Returns a session-specific GUID associated with the provided public key. This GUID is used by the client to generate an authorization token for the current session. The actual token generation process occurs on the client side for enhanced security. This GUID serves as a unique identifier for the client's session and is linked to the public key for authentication purposes.",
        "operationId": "GetToken",
        "parameters": [
          {
            "name": "pubkey",
            "in": "query",
            "description": "64-character hex-encoded (32 bytes) Schnorr public key (secp256k1) that identifies the API user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuidResult"
                }
              }
            }
          }
        }
      }
    },
    "/getaccountinfo": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Returns information about the account like currency and country of fiat",
        "description": "Returns information about the account, including details such as the currency and country of the fiat account.",
        "operationId": "GetAccountInfo",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token generated by the client using Schnorr Signatures for secp256k1. It encodes the user's public key and the session identifier returned by the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoResult"
                }
              }
            }
          }
        }
      }
    },
    "/topupandmine6blocks": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Sends specified amount of satoshis to a Bitcoin address and mines 6 blocks for confirmation (RegTest mode only)",
        "description": "In RegTest mode only: Sends the specified amount of satoshis from the local Bitcoin wallet to the provided Bitcoin address, then automatically mines 6 blocks to ensure transaction confirmation. This function is useful for testing and development purposes in a controlled environment.",
        "operationId": "TopUpAndMine6Blocks",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token generated by the client using Schnorr Signatures for secp256k1. It encodes the user's public key and the session identifier returned by the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bitcoinAddr",
            "in": "query",
            "description": "Bitcoin address to receive the funds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "satoshis",
            "in": "query",
            "description": "Amount of satoshis to send",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/sendtoaddress": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Sends Bitcoin from local wallet to a specified address (Admin-only in non-RegTest modes)",
        "description": "Transfers the specified amount of satoshis from the local Bitcoin wallet to the provided Bitcoin address. In RegTest mode, this function is available to all users. In other modes (TestNet, MainNet), only administrators can use this function.",
        "operationId": "SendToAddress",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bitcoinAddr",
            "in": "query",
            "description": "bitcoin address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "satoshis",
            "in": "query",
            "description": "number of satoshis",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/generateblocks": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Generate new blocks in RegTest mode",
        "description": "Mines a specified number of new blocks in the Bitcoin network. This operation is only available in RegTest mode, which is used for testing and development purposes.",
        "operationId": "GenerateBlocks",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token generated by the client using Schnorr Signatures for secp256k1. It encodes the user's public key and the session identifier returned by the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blocknum",
            "in": "query",
            "description": "The number of new blocks to generate. Must be a positive integer.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/newbitcoinaddress": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Generate a new Bitcoin address for the local wallet",
        "description": "Creates and returns a new Bitcoin address associated with the local Bitcoin wallet. This endpoint provides different access levels based on the network mode: in RegTest mode, it's accessible to all users, while in TestNet and MainNet modes, it's restricted to administrators only. This feature enables secure fund management and testing in various network environments.",
        "operationId": "NewBitcoinAddress",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/getbitcoinwalletbalance": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve the current balance of the Bitcoin wallet",
        "description": "Fetches and returns the current balance of the Bitcoin wallet in satoshis. The balance returned is based on the specified minimum number of confirmations. This endpoint has different access levels: in RegTest mode, it's accessible to all users, while in TestNet and MainNet modes, it's restricted to administrators only.",
        "operationId": "GetBitcoinWalletBalance",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minConf",
            "in": "query",
            "description": "The minimum number of confirmations required for transactions to be included in the balance calculation. This parameter allows for flexibility in determining the level of certainty for the reported balance.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int64Result"
                }
              }
            }
          }
        }
      }
    },
    "/getlndwalletbalance": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve the current balance of the LND wallet",
        "description": "Fetches and returns the current balance of the LND (Lightning Network Daemon) wallet, including confirmed, unconfirmed, total, reserved, and locked balances. This endpoint provides different access levels based on the network mode: in RegTest mode, it's accessible to all users, while in TestNet and MainNet modes, it's restricted to administrators only.",
        "operationId": "GetLndWalletBalance",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LndWalletBalanceRetResult"
                }
              }
            }
          }
        }
      }
    },
    "/openreserve": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Open a new reserve in the LND wallet",
        "description": "Creates a new reserve in the LND wallet, allocating a specified amount of satoshis. This operation is useful for setting aside funds for future transactions or channel openings. The endpoint returns a unique identifier (GUID) for the newly created reserve. Access to this endpoint varies based on the network mode: in RegTest mode, it's accessible to all users, while in TestNet and MainNet modes, it's restricted to administrators only.",
        "operationId": "OpenReserve",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "satoshis",
            "in": "query",
            "description": "The amount of satoshis to allocate to the new reserve. This value must be a positive integer representing the number of satoshis (1 satoshi = 0.00000001 BTC).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuidResult"
                }
              }
            }
          }
        }
      }
    },
    "/closereserve": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Close a specific reserve in the LND wallet",
        "description": "Closes a previously opened reserve in the LND wallet, identified by its unique GUID. This operation releases the allocated funds back to the main wallet balance. Access to this endpoint varies based on the network mode: in RegTest mode, it's accessible to all users, while in TestNet and MainNet modes, it's restricted to administrators only.",
        "operationId": "CloseReserve",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reserveId",
            "in": "query",
            "description": "The unique identifier (GUID) of the reserve to be closed. This GUID was returned when the reserve was initially opened using the OpenReserve endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/listorphanedreserves": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve a list of orphaned reserves in the LND wallet",
        "description": "Returns an array of unique identifiers (GUIDs) for orphaned reserves in the LND wallet. Orphaned reserves are those that are not associated with any payouts, whether active or not active. This endpoint is useful for identifying and managing unused allocated funds. Access to this endpoint varies based on the network mode: in RegTest mode, it's accessible to all users, while in TestNet and MainNet modes, it's restricted to administrators only.",
        "operationId": "ListOrphanedReserves",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuidArrayResult"
                }
              }
            }
          }
        }
      }
    },
    "/listchannels": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "List Lightning Network Channels",
        "description": "Retrieves a list of Lightning Network channels associated with the LND node. This endpoint provides detailed information about each channel, including its capacity, balance, and current state. It can be used to monitor the node's connectivity and liquidity within the Lightning Network. The response includes both active and inactive channels, depending on the 'activeOnly' parameter.",
        "operationId": "ListChannels",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key and session identifier. Admin-level token required for TestNet and MainNet modes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "If true, returns only active channels. If false, returns all channels including inactive ones.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelArrayResult"
                }
              }
            }
          }
        }
      }
    },
    "/listclosedchannels": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "List Closed Lightning Network Channels",
        "description": "Retrieves a list of closed Lightning Network channels associated with the LND node. This endpoint provides detailed information about each closed channel, including its capacity, closing transaction, and settlement details. It can be used to review the history of closed channels and analyze past network connections.",
        "operationId": "ListClosedChannels",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelCloseSummaryArrayResult"
                }
              }
            }
          }
        }
      }
    },
    "/estimatefee": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Estimate total fees for potential payout including channel closing and Bitcoin transaction fees",
        "description": "Provides a comprehensive fee estimation for a potential payout that includes both the Bitcoin transaction fee and the Lightning Network channel closing fee. This endpoint calculates the estimated on-chain transaction fee based on the provided destination address and amount, as well as the potential fee for closing a Lightning Network channel. It returns the total Bitcoin transaction fee in satoshis, the fee rate in satoshis per virtual byte, and the estimated channel closing fee. This information is crucial for users to understand the full cost implications of their payout, including the possibility of needing to close a channel to fulfill the payout. It helps users make informed decisions about their fund management and transaction strategies. In case of any issues or errors, only administrators will receive detailed error information to maintain system security and privacy. Non-admin users will receive a generic response indicating an estimation problem without specific details.",
        "operationId": "EstimateFee",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function. It determines the user's access level and the level of detail in the response. Admin tokens provide access to detailed error information if issues occur.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "The destination Bitcoin address for the potential payout transaction. This should be a valid Bitcoin address where the funds would be sent if the payout is executed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "satoshis",
            "in": "query",
            "description": "The amount of the potential payout, specified in satoshis (1 satoshi = 0.00000001 BTC). This value must be a positive integer representing the exact amount of the intended payout, which will be used to calculate the appropriate fees.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeEstimateRetResult"
                }
              }
            }
          }
        }
      }
    },
    "/getbalance": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve the current balance of the user's account",
        "description": "This endpoint provides detailed information about the user's account balance. The balance is returned as an AccountBalanceDetails object, which includes the total balance, available balance, and any pending transactions. All amounts are in satoshis (1 BTC = 100,000,000 satoshis). ",
        "operationId": "GetBalance",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBalanceDetailsResult"
                }
              }
            }
          }
        }
      }
    },
    "/getfiatbalance": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve the current balance of the user's fiat account",
        "description": "This endpoint provides detailed information about the user's fiat account balance. The balance is returned as an AccountFiatBalanceDetails object, which includes the total balance, available balance, and any pending transactions. All amounts are in cents related to the specified currency. ",
        "operationId": "GetFiatBalance",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "The fiat currency code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountFiatBalanceDetailsResult"
                }
              }
            }
          }
        }
      }
    },
    "/newaddress": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Generate a new Bitcoin address for account top-up",
        "description": "Creates and returns a new Bitcoin address associated with the user's Lightning Network account. This address can be used to receive on-chain Bitcoin payments, which will then be credited to the user's Lightning Network balance. This feature enables seamless integration between on-chain and off-chain funds management.",
        "operationId": "NewAddress",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResult"
                }
              }
            }
          }
        }
      }
    },
    "/listtransactions": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "List Topup transaction",
        "description": "List Topup transaction",
        "operationId": "ListTransactions",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRecordArrayResult"
                }
              }
            }
          }
        }
      }
    },
    "/registerpayout": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Register a new payout request to the Bitcoin blockchain",
        "description": "Initiates a new payout request from the user's Lightning Network wallet to a specified Bitcoin address on the blockchain. This operation registers the payout for execution, which may involve closing Lightning channels if necessary to fulfill the requested amount. The method returns a unique identifier (GUID) for tracking the payout request.",
        "operationId": "RegisterPayout",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "satoshis",
            "in": "query",
            "description": "The amount to be paid out, specified in satoshis (1 satoshi = 0.00000001 BTC). Must be a positive integer representing the exact payout amount.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "btcAddress",
            "in": "query",
            "description": "The destination Bitcoin address where the payout will be sent. This should be a valid Bitcoin address on the blockchain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuidResult"
                }
              }
            }
          }
        }
      }
    },
    "/listpayouts": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "List registered payouts",
        "description": "List registered payouts",
        "operationId": "ListPayouts",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutRecordArrayResult"
                }
              }
            }
          }
        }
      }
    },
    "/getpayout": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Get registered payouts",
        "description": "Get registered payouts",
        "operationId": "GetPayout",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token is generated using Schnorr Signatures for secp256k1 and encodes the user's public key along with the session identifier obtained from the GetToken function. For TestNet and MainNet modes, an admin-level token is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payoutId",
            "in": "query",
            "description": "Payout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/addinvoice": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Generate a new Lightning Network invoice",
        "description": "Creates and returns a new Lightning Network invoice for receiving payments. This endpoint allows users to generate payment requests with customizable amount, memo, and expiration time. The created invoice can be shared with payers to facilitate Lightning Network transactions.",
        "operationId": "AddInvoice",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "satoshis",
            "in": "query",
            "description": "The amount of the invoice in satoshis (1 BTC = 100,000,000 satoshis). Must be a positive integer representing the exact payment amount requested.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "memo",
            "in": "query",
            "description": "An optional memo or description for the invoice. This can be used to provide additional context or details about the payment to the payer. The memo will be included in the encoded payment request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry",
            "in": "query",
            "description": "The expiration time for the payment request, in seconds. After this duration, the invoice will no longer be valid for payment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/addhodlinvoice": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Generate a new Lightning Network HODL invoice for escrow-like functionality",
        "description": "Creates and returns a new Lightning Network HODL invoice. HODL invoices enable escrow-like functionalities by allowing the recipient to claim the payment only when a specific preimage is revealed using the SettleInvoice method. This preimage must be provided by the payer or a trusted third party. This mechanism provides an additional layer of security and enables conditional payments in the Lightning Network, making it suitable for implementing escrow accounts and other advanced payment scenarios.",
        "operationId": "AddHodlInvoice",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "satoshis",
            "in": "query",
            "description": "The amount of the invoice in satoshis (1 BTC = 100,000,000 satoshis). Must be a positive integer representing the exact payment amount requested.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "hash",
            "in": "query",
            "description": "The SHA-256 hash of the preimage. The payer or a trusted third party must provide the corresponding preimage, which will be used with the SettleInvoice method to claim the payment, enabling escrow-like functionality.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memo",
            "in": "query",
            "description": "An optional memo or description for the invoice. This can be used to provide additional context or details about the payment or escrow conditions to the payer. The memo will be included in the encoded payment request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry",
            "in": "query",
            "description": "The expiration time for the payment request, in seconds. After this duration, the HODL invoice will no longer be valid for payment. Consider setting an appropriate duration based on the expected escrow period.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/addfiatinvoice": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Generate a new Fiat over Lightning Network invoice",
        "description": "Creates and returns a new Fiat over Lightning Network invoice for receiving payments. This endpoint allows users to generate payment requests with customizable amount, memo, and expiration time. The created invoice can be shared with payers to facilitate Lightning Network transactions.",
        "operationId": "AddFiatInvoice",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cents",
            "in": "query",
            "description": "The amount of the invoice in fiat currency cents. Must be a positive integer representing the exact payment amount requested.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "The fiat currency country code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "The fiat currency code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memo",
            "in": "query",
            "description": "An optional memo or description for the invoice. This can be used to provide additional context or details about the payment to the payer. The memo will be included in the encoded payment request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry",
            "in": "query",
            "description": "The expiration time for the payment request, in seconds. After this duration, the invoice will no longer be valid for payment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/addfiathodlinvoice": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Generate a new Fiat over Lightning Network HODL invoice for escrow-like functionality",
        "description": "Creates and returns a new Fiat over Lightning Network HODL invoice. HODL invoices enable escrow-like functionalities by allowing the recipient to claim the payment only when a specific preimage is revealed using the SettleInvoice method. This preimage must be provided by the payer or a trusted third party. This mechanism provides an additional layer of security and enables conditional payments in the Lightning Network, making it suitable for implementing escrow accounts and other advanced payment scenarios.",
        "operationId": "AddFiatHodlInvoice",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cents",
            "in": "query",
            "description": "The amount of the invoice in fiat currency cents. Must be a positive integer representing the exact payment amount requested.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "The fiat currency country code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "The fiat currency code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hash",
            "in": "query",
            "description": "The SHA-256 hash of the preimage. The payer or a trusted third party must provide the corresponding preimage, which will be used with the SettleInvoice method to claim the payment, enabling escrow-like functionality.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memo",
            "in": "query",
            "description": "An optional memo or description for the invoice. This can be used to provide additional context or details about the payment or escrow conditions to the payer. The memo will be included in the encoded payment request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry",
            "in": "query",
            "description": "The expiration time for the payment request, in seconds. After this duration, the HODL invoice will no longer be valid for payment. Consider setting an appropriate duration based on the expected escrow period.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/decodeinvoice": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Decode a Lightning Network invoice",
        "description": "This endpoint decodes a Lightning Network invoice (also known as a payment request) and returns detailed information about its contents. It provides insights into the payment amount, recipient, expiry time, and other relevant metadata encoded in the invoice.",
        "operationId": "DecodeInvoice",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentRequest",
            "in": "query",
            "description": "The Lightning Network invoice string to be decoded. This is typically a long string starting with 'lnbc' for mainnet or 'lntb' for testnet.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequestRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/cancelinvoicesendpayment": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Cancels Invoice and Send a Lightning Network payment atomicallly",
        "description": "Cancels ionvoice and Initiates a Lightning Network payment based on the provided payment request. This endpoint attempts to route the payment to its final destination, handling all necessary channel operations and routing decisions.",
        "operationId": "CancelInvoiceSendPayment",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenthash",
            "in": "query",
            "description": "The Lightning Network payment hash of the invoice to be cancelled",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentrequest",
            "in": "query",
            "description": "The Lightning Network payment request (invoice) to be paid. This encoded string contains all necessary details for the payment, including amount and recipient.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time (in seconds) allowed for finding a route for the payment. If a route isn't found within this time, the payment attempt will be aborted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "feelimit",
            "in": "query",
            "description": "Maximum fee (in millisatoshis) that the user is willing to pay for this transaction. If the calculated fee exceeds this limit, the payment will not be sent.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/sendpayment": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Send a Lightning Network payment",
        "description": "Initiates a Lightning Network payment based on the provided payment request. This endpoint attempts to route the payment to its final destination, handling all necessary channel operations and routing decisions.",
        "operationId": "SendPayment",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentrequest",
            "in": "query",
            "description": "The Lightning Network payment request (invoice) to be paid. This encoded string contains all necessary details for the payment, including amount and recipient.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum time (in seconds) allowed for finding a route for the payment. If a route isn't found within this time, the payment attempt will be aborted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "feelimit",
            "in": "query",
            "description": "Maximum fee (in millisatoshis) that the user is willing to pay for this transaction. If the calculated fee exceeds this limit, the payment will not be sent.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/estimateroutefee": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Estimate Lightning Network payment route fee",
        "description": "This endpoint calculates and returns an estimated fee for routing a Lightning Network payment based on the provided payment request. It helps users anticipate the cost of sending a payment before actually initiating the transaction.",
        "operationId": "EstimateRouteFee",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentrequest",
            "in": "query",
            "description": "The Lightning Network payment request (invoice) for which the route fee is to be estimated. This encoded string contains necessary details such as the payment amount and recipient.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum probing time (in seconds) allowed for finding a routing fee for the payment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteFeeRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/settleinvoice": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Settle a Lightning Network Hold Invoice",
        "description": "Settles a previously accepted hold invoice using the provided preimage. This action finalizes the payment process for a hold invoice, releasing the funds to the invoice creator.",
        "operationId": "SettleInvoice",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preimage",
            "in": "query",
            "description": "The preimage (32-byte hash preimage) that corresponds to the payment hash of the hold invoice to be settled. This preimage serves as proof of payment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/cancelinvoice": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Cancel a Lightning Network Invoice",
        "description": "Cancels an open Lightning Network invoice. This endpoint allows users to cancel an invoice that hasn't been paid yet. If the invoice is already canceled, the operation succeeds. However, if the invoice has been settled, the cancellation will fail.",
        "operationId": "CancelInvoice",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenthash",
            "in": "query",
            "description": "The payment hash of the invoice to be canceled. This unique identifier is used to locate the specific invoice in the system.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/getinvoice": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve a specific Lightning Network invoice",
        "description": "Fetches and returns detailed information about a specific Lightning Network invoice identified by its payment hash. This endpoint allows users to access invoice details such as amount, status, and creation date.",
        "operationId": "GetInvoice",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenthash",
            "in": "query",
            "description": "The payment hash of the invoice to retrieve. This unique identifier is used to locate the specific invoice in the system.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/listinvoices": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve all invoices for the authenticated account",
        "description": "This endpoint returns a comprehensive list of all invoices associated with the authenticated user's account. It includes both paid and unpaid invoices, providing a complete overview of the account's invoice history.",
        "operationId": "ListInvoices",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceRecordArrayResult"
                }
              }
            }
          }
        }
      }
    },
    "/listpayments": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve all successful and in-progress payments for the account",
        "description": "This endpoint provides a list of all payments associated with the authenticated user's account that have not failed. This includes successful payments and those that are still in progress, offering a clear view of the account's payment activity.",
        "operationId": "ListPayments",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordArrayResult"
                }
              }
            }
          }
        }
      }
    },
    "/getpayment": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Retrieve details of a specific payment",
        "description": "This endpoint fetches and returns detailed information about a specific payment identified by its payment hash. It provides comprehensive data about the payment, including its status, amount, and other relevant details.",
        "operationId": "GetPayment",
        "parameters": [
          {
            "name": "authToken",
            "in": "query",
            "description": "Authorization token for authentication and access control. This token, generated using Schnorr Signatures for secp256k1, encodes the user's public key and session identifier from the GetToken function.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymenthash",
            "in": "query",
            "description": "Unique identifier (hash) of the payment to be retrieved. This hash is used to locate the specific payment record in the system.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResult"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "GigLNDWalletAPI"
        ],
        "summary": "Health check endpoint",
        "description": "This endpoint returns a status 200 and 'ok' to indicate that the service is running properly.",
        "operationId": "Health",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountBalanceDetails": {
        "required": [
          "availableAmount",
          "inFlightPaymentFees",
          "inFlightPayments",
          "inProgressPayoutFees",
          "inProgressPayoutOnChainFees",
          "inProgressPayouts",
          "notConfirmedTopups",
          "settledEarnings",
          "totalAmount",
          "totalEarnings",
          "totalPaymentFees",
          "totalPayments",
          "totalPayoutFees",
          "totalPayoutOnChainFees",
          "totalPayouts",
          "totalTopups"
        ],
        "type": "object",
        "properties": {
          "availableAmount": {
            "type": "integer",
            "format": "int64"
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64"
          },
          "totalTopups": {
            "type": "integer",
            "format": "int64"
          },
          "notConfirmedTopups": {
            "type": "integer",
            "format": "int64"
          },
          "settledEarnings": {
            "type": "integer",
            "format": "int64"
          },
          "totalEarnings": {
            "type": "integer",
            "format": "int64"
          },
          "totalPayments": {
            "type": "integer",
            "format": "int64"
          },
          "inFlightPayments": {
            "type": "integer",
            "format": "int64"
          },
          "totalPayouts": {
            "type": "integer",
            "format": "int64"
          },
          "inProgressPayouts": {
            "type": "integer",
            "format": "int64"
          },
          "totalPaymentFees": {
            "type": "integer",
            "format": "int64"
          },
          "inFlightPaymentFees": {
            "type": "integer",
            "format": "int64"
          },
          "totalPayoutOnChainFees": {
            "type": "integer",
            "format": "int64"
          },
          "inProgressPayoutOnChainFees": {
            "type": "integer",
            "format": "int64"
          },
          "totalPayoutFees": {
            "type": "integer",
            "format": "int64"
          },
          "inProgressPayoutFees": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AccountBalanceDetailsResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountBalanceDetails"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountFiatBalanceDetails": {
        "required": [
          "inProgressPayouts",
          "totalEarnings",
          "totalFees",
          "totalPayouts"
        ],
        "type": "object",
        "properties": {
          "totalFees": {
            "type": "integer",
            "format": "int64"
          },
          "totalEarnings": {
            "type": "integer",
            "format": "int64"
          },
          "totalPayouts": {
            "type": "integer",
            "format": "int64"
          },
          "inProgressPayouts": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AccountFiatBalanceDetailsResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountFiatBalanceDetails"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountInfo": {
        "required": [
          "fiatCountry",
          "fiatCurrency"
        ],
        "type": "object",
        "properties": {
          "fiatCountry": {
            "type": "string",
            "nullable": true
          },
          "fiatCurrency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountInfoResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountInfo"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Channel": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "remotePubkey": {
            "type": "string",
            "nullable": true
          },
          "channelPoint": {
            "type": "string",
            "nullable": true
          },
          "chanId": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "localBalance": {
            "type": "integer",
            "format": "int64"
          },
          "remoteBalance": {
            "type": "integer",
            "format": "int64"
          },
          "commitFee": {
            "type": "integer",
            "format": "int64"
          },
          "commitWeight": {
            "type": "integer",
            "format": "int64"
          },
          "feePerKw": {
            "type": "integer",
            "format": "int64"
          },
          "unsettledBalance": {
            "type": "integer",
            "format": "int64"
          },
          "totalSatoshisSent": {
            "type": "integer",
            "format": "int64"
          },
          "totalSatoshisReceived": {
            "type": "integer",
            "format": "int64"
          },
          "numUpdates": {
            "type": "integer",
            "format": "int64"
          },
          "pendingHtlcs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HTLC"
            },
            "nullable": true,
            "readOnly": true
          },
          "csvDelay": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "private": {
            "type": "boolean"
          },
          "initiator": {
            "type": "boolean"
          },
          "chanStatusFlags": {
            "type": "string",
            "nullable": true
          },
          "localChanReserveSat": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "remoteChanReserveSat": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "staticRemoteKey": {
            "type": "boolean",
            "deprecated": true
          },
          "commitmentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommitmentType"
              }
            ],
            "x-enumNames": [
              "UnknownCommitmentType",
              "Legacy",
              "StaticRemoteKey",
              "Anchors",
              "ScriptEnforcedLease",
              "SimpleTaproot"
            ],
            "x-ms-enum": {
              "name": "CommitmentType",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "UnknownCommitmentType"
                },
                {
                  "value": 1,
                  "name": "Legacy"
                },
                {
                  "value": 2,
                  "name": "StaticRemoteKey"
                },
                {
                  "value": 3,
                  "name": "Anchors"
                },
                {
                  "value": 4,
                  "name": "ScriptEnforcedLease"
                },
                {
                  "value": 5,
                  "name": "SimpleTaproot"
                }
              ]
            }
          },
          "lifetime": {
            "type": "integer",
            "format": "int64"
          },
          "uptime": {
            "type": "integer",
            "format": "int64"
          },
          "closeAddress": {
            "type": "string",
            "nullable": true
          },
          "pushAmountSat": {
            "type": "integer",
            "format": "int64"
          },
          "thawHeight": {
            "type": "integer",
            "format": "int32"
          },
          "localConstraints": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelConstraints"
              }
            ],
            "nullable": true
          },
          "remoteConstraints": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelConstraints"
              }
            ],
            "nullable": true
          },
          "aliasScids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true,
            "readOnly": true
          },
          "zeroConf": {
            "type": "boolean"
          },
          "zeroConfConfirmedScid": {
            "type": "integer",
            "format": "int64"
          },
          "peerAlias": {
            "type": "string",
            "nullable": true
          },
          "peerScidAlias": {
            "type": "integer",
            "format": "int64"
          },
          "memo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelArrayResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelCloseSummary": {
        "type": "object",
        "properties": {
          "channelPoint": {
            "type": "string",
            "nullable": true
          },
          "chanId": {
            "type": "integer",
            "format": "int64"
          },
          "chainHash": {
            "type": "string",
            "nullable": true
          },
          "closingTxHash": {
            "type": "string",
            "nullable": true
          },
          "remotePubkey": {
            "type": "string",
            "nullable": true
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "closeHeight": {
            "type": "integer",
            "format": "int32"
          },
          "settledBalance": {
            "type": "integer",
            "format": "int64"
          },
          "timeLockedBalance": {
            "type": "integer",
            "format": "int64"
          },
          "closeType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClosureType"
              }
            ],
            "x-enumNames": [
              "CooperativeClose",
              "LocalForceClose",
              "RemoteForceClose",
              "BreachClose",
              "FundingCanceled",
              "Abandoned"
            ],
            "x-ms-enum": {
              "name": "ClosureType",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "CooperativeClose"
                },
                {
                  "value": 1,
                  "name": "LocalForceClose"
                },
                {
                  "value": 2,
                  "name": "RemoteForceClose"
                },
                {
                  "value": 3,
                  "name": "BreachClose"
                },
                {
                  "value": 4,
                  "name": "FundingCanceled"
                },
                {
                  "value": 5,
                  "name": "Abandoned"
                }
              ]
            }
          },
          "openInitiator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Initiator"
              }
            ],
            "x-enumNames": [
              "Unknown",
              "Local",
              "Remote",
              "Both"
            ],
            "x-ms-enum": {
              "name": "Initiator",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Unknown"
                },
                {
                  "value": 1,
                  "name": "Local"
                },
                {
                  "value": 2,
                  "name": "Remote"
                },
                {
                  "value": 3,
                  "name": "Both"
                }
              ]
            }
          },
          "closeInitiator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Initiator"
              }
            ],
            "x-enumNames": [
              "Unknown",
              "Local",
              "Remote",
              "Both"
            ],
            "x-ms-enum": {
              "name": "Initiator",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Unknown"
                },
                {
                  "value": 1,
                  "name": "Local"
                },
                {
                  "value": 2,
                  "name": "Remote"
                },
                {
                  "value": 3,
                  "name": "Both"
                }
              ]
            }
          },
          "resolutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resolution"
            },
            "nullable": true,
            "readOnly": true
          },
          "aliasScids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true,
            "readOnly": true
          },
          "zeroConfConfirmedScid": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ChannelCloseSummaryArrayResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCloseSummary"
            },
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelConstraints": {
        "type": "object",
        "properties": {
          "csvDelay": {
            "type": "integer",
            "format": "int32"
          },
          "chanReserveSat": {
            "type": "integer",
            "format": "int64"
          },
          "dustLimitSat": {
            "type": "integer",
            "format": "int64"
          },
          "maxPendingAmtMsat": {
            "type": "integer",
            "format": "int64"
          },
          "minHtlcMsat": {
            "type": "integer",
            "format": "int64"
          },
          "maxAcceptedHtlcs": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ClosureType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "CooperativeClose",
          "LocalForceClose",
          "RemoteForceClose",
          "BreachClose",
          "FundingCanceled",
          "Abandoned"
        ],
        "x-ms-enum": {
          "name": "ClosureType",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "CooperativeClose"
            },
            {
              "value": 1,
              "name": "LocalForceClose"
            },
            {
              "value": 2,
              "name": "RemoteForceClose"
            },
            {
              "value": 3,
              "name": "BreachClose"
            },
            {
              "value": 4,
              "name": "FundingCanceled"
            },
            {
              "value": 5,
              "name": "Abandoned"
            }
          ]
        }
      },
      "CommitmentType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "UnknownCommitmentType",
          "Legacy",
          "StaticRemoteKey",
          "Anchors",
          "ScriptEnforcedLease",
          "SimpleTaproot"
        ],
        "x-ms-enum": {
          "name": "CommitmentType",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "UnknownCommitmentType"
            },
            {
              "value": 1,
              "name": "Legacy"
            },
            {
              "value": 2,
              "name": "StaticRemoteKey"
            },
            {
              "value": 3,
              "name": "Anchors"
            },
            {
              "value": 4,
              "name": "ScriptEnforcedLease"
            },
            {
              "value": 5,
              "name": "SimpleTaproot"
            }
          ]
        }
      },
      "FeeEstimateRet": {
        "type": "object",
        "properties": {
          "txFeeSat": {
            "type": "integer",
            "format": "int64"
          },
          "channelClosingFeeSat": {
            "type": "integer",
            "format": "int64"
          },
          "satPerVbyte": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "FeeEstimateRetResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeeEstimateRet"
              }
            ]
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GuidArrayResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GuidResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "uuid"
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HTLC": {
        "type": "object",
        "properties": {
          "incoming": {
            "type": "boolean"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "hashLock": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "expirationHeight": {
            "type": "integer",
            "format": "int32"
          },
          "htlcIndex": {
            "type": "integer",
            "format": "int64"
          },
          "forwardingChannel": {
            "type": "integer",
            "format": "int64"
          },
          "forwardingHtlcIndex": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Initiator": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Unknown",
          "Local",
          "Remote",
          "Both"
        ],
        "x-ms-enum": {
          "name": "Initiator",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "Unknown"
            },
            {
              "value": 1,
              "name": "Local"
            },
            {
              "value": 2,
              "name": "Remote"
            },
            {
              "value": 3,
              "name": "Both"
            }
          ]
        }
      },
      "Int64Result": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64"
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceRecord": {
        "required": [
          "amount",
          "creationTime",
          "currency",
          "expiryTime",
          "isHodl",
          "memo",
          "paymentAddr",
          "paymentHash",
          "paymentRequest",
          "state"
        ],
        "type": "object",
        "properties": {
          "paymentHash": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "paymentAddr": {
            "type": "string",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "nullable": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time"
          },
          "paymentRequest": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceState"
              }
            ],
            "x-enumNames": [
              "Open",
              "Settled",
              "Cancelled",
              "Accepted",
              "FiatNotPaid"
            ],
            "x-ms-enum": {
              "name": "InvoiceState",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Open"
                },
                {
                  "value": 1,
                  "name": "Settled"
                },
                {
                  "value": 2,
                  "name": "Cancelled"
                },
                {
                  "value": 3,
                  "name": "Accepted"
                },
                {
                  "value": 4,
                  "name": "FiatNotPaid"
                }
              ]
            }
          },
          "isHodl": {
            "type": "boolean"
          },
          "settleTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceRecordArrayResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceRecord"
            },
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceRecordResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceRecord"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceState": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Open",
          "Settled",
          "Cancelled",
          "Accepted",
          "FiatNotPaid"
        ],
        "x-ms-enum": {
          "name": "InvoiceState",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "Open"
            },
            {
              "value": 1,
              "name": "Settled"
            },
            {
              "value": 2,
              "name": "Cancelled"
            },
            {
              "value": 3,
              "name": "Accepted"
            },
            {
              "value": 4,
              "name": "FiatNotPaid"
            }
          ]
        }
      },
      "InvoiceStateChange": {
        "required": [
          "newState",
          "paymentHash"
        ],
        "type": "object",
        "properties": {
          "paymentHash": {
            "type": "string",
            "nullable": true
          },
          "newState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceState"
              }
            ],
            "x-enumNames": [
              "Open",
              "Settled",
              "Cancelled",
              "Accepted",
              "FiatNotPaid"
            ],
            "x-ms-enum": {
              "name": "InvoiceState",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Open"
                },
                {
                  "value": 1,
                  "name": "Settled"
                },
                {
                  "value": 2,
                  "name": "Cancelled"
                },
                {
                  "value": 3,
                  "name": "Accepted"
                },
                {
                  "value": 4,
                  "name": "FiatNotPaid"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "LNDWalletErrorCode": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Ok",
          "InvalidToken",
          "NotEnoughFunds",
          "UnknownPayment",
          "UnknownInvoice",
          "InvoiceAlreadyCancelled",
          "InvoiceAlreadyAccepted",
          "InvoiceAlreadySettled",
          "InvoiceNotAccepted",
          "AlreadyPayed",
          "PayoutNotOpened",
          "PayoutAlreadySent",
          "OperationFailed",
          "AccessDenied",
          "FeeLimitTooSmall",
          "FiatNotPaidOrMismatched",
          "FiatCountryCurrencyNotSupported"
        ],
        "x-ms-enum": {
          "name": "LNDWalletErrorCode",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "Ok"
            },
            {
              "value": 1,
              "name": "InvalidToken"
            },
            {
              "value": 2,
              "name": "NotEnoughFunds"
            },
            {
              "value": 3,
              "name": "UnknownPayment"
            },
            {
              "value": 4,
              "name": "UnknownInvoice"
            },
            {
              "value": 5,
              "name": "InvoiceAlreadyCancelled"
            },
            {
              "value": 6,
              "name": "InvoiceAlreadyAccepted"
            },
            {
              "value": 7,
              "name": "InvoiceAlreadySettled"
            },
            {
              "value": 8,
              "name": "InvoiceNotAccepted"
            },
            {
              "value": 9,
              "name": "AlreadyPayed"
            },
            {
              "value": 10,
              "name": "PayoutNotOpened"
            },
            {
              "value": 11,
              "name": "PayoutAlreadySent"
            },
            {
              "value": 12,
              "name": "OperationFailed"
            },
            {
              "value": 13,
              "name": "AccessDenied"
            },
            {
              "value": 14,
              "name": "FeeLimitTooSmall"
            },
            {
              "value": 15,
              "name": "FiatNotPaidOrMismatched"
            },
            {
              "value": 16,
              "name": "FiatCountryCurrencyNotSupported"
            }
          ]
        }
      },
      "LndWalletBalanceRet": {
        "type": "object",
        "properties": {
          "confirmedBalance": {
            "type": "integer",
            "format": "int64"
          },
          "lockedBalance": {
            "type": "integer",
            "format": "int64"
          },
          "reservedBalanceAnchorChan": {
            "type": "integer",
            "format": "int64"
          },
          "totalBalance": {
            "type": "integer",
            "format": "int64"
          },
          "unconfirmedBalance": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "LndWalletBalanceRetResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LndWalletBalanceRet"
              }
            ]
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewTransactionFound": {
        "required": [
          "address",
          "amountSat",
          "numConfirmations",
          "txHash"
        ],
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "nullable": true
          },
          "numConfirmations": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "amountSat": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "OutPoint": {
        "type": "object",
        "properties": {
          "txidBytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "txidStr": {
            "type": "string",
            "nullable": true
          },
          "outputIndex": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PaymentFailureReason": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          101,
          102,
          103,
          104,
          105,
          106
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "None",
          "Timeout",
          "NoRoute",
          "Error",
          "IncorrectPaymentDetails",
          "InsufficientBalance",
          "Canceled",
          "EmptyReturnStream",
          "InvoiceAlreadySettled",
          "InvoiceAlreadyCancelled",
          "InvoiceAlreadyAccepted",
          "FeeLimitTooSmall",
          "FiatNotPaidOrMismatched"
        ],
        "x-ms-enum": {
          "name": "PaymentFailureReason",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "None"
            },
            {
              "value": 1,
              "name": "Timeout"
            },
            {
              "value": 2,
              "name": "NoRoute"
            },
            {
              "value": 3,
              "name": "Error"
            },
            {
              "value": 4,
              "name": "IncorrectPaymentDetails"
            },
            {
              "value": 5,
              "name": "InsufficientBalance"
            },
            {
              "value": 6,
              "name": "Canceled"
            },
            {
              "value": 101,
              "name": "EmptyReturnStream"
            },
            {
              "value": 102,
              "name": "InvoiceAlreadySettled"
            },
            {
              "value": 103,
              "name": "InvoiceAlreadyCancelled"
            },
            {
              "value": 104,
              "name": "InvoiceAlreadyAccepted"
            },
            {
              "value": 105,
              "name": "FeeLimitTooSmall"
            },
            {
              "value": 106,
              "name": "FiatNotPaidOrMismatched"
            }
          ]
        }
      },
      "PaymentRecord": {
        "required": [
          "amount",
          "creationTime",
          "currency",
          "failureReason",
          "feeMsat",
          "paymentHash",
          "status"
        ],
        "type": "object",
        "properties": {
          "paymentHash": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentStatus"
              }
            ],
            "x-enumNames": [
              "InFlight",
              "Succeeded",
              "Failed",
              "Initiated"
            ],
            "x-ms-enum": {
              "name": "PaymentStatus",
              "modelAsString": false,
              "values": [
                {
                  "value": 1,
                  "name": "InFlight"
                },
                {
                  "value": 2,
                  "name": "Succeeded"
                },
                {
                  "value": 3,
                  "name": "Failed"
                },
                {
                  "value": 4,
                  "name": "Initiated"
                }
              ]
            }
          },
          "failureReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentFailureReason"
              }
            ],
            "x-enumNames": [
              "None",
              "Timeout",
              "NoRoute",
              "Error",
              "IncorrectPaymentDetails",
              "InsufficientBalance",
              "Canceled",
              "EmptyReturnStream",
              "InvoiceAlreadySettled",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched"
            ],
            "x-ms-enum": {
              "name": "PaymentFailureReason",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "None"
                },
                {
                  "value": 1,
                  "name": "Timeout"
                },
                {
                  "value": 2,
                  "name": "NoRoute"
                },
                {
                  "value": 3,
                  "name": "Error"
                },
                {
                  "value": 4,
                  "name": "IncorrectPaymentDetails"
                },
                {
                  "value": 5,
                  "name": "InsufficientBalance"
                },
                {
                  "value": 6,
                  "name": "Canceled"
                },
                {
                  "value": 101,
                  "name": "EmptyReturnStream"
                },
                {
                  "value": 102,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 103,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 104,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 105,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 106,
                  "name": "FiatNotPaidOrMismatched"
                }
              ]
            }
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "feeMsat": {
            "type": "integer",
            "format": "int64"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PaymentRecordArrayResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentRecord"
            },
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentRecordResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRecord"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentRequestRecord": {
        "required": [
          "amount",
          "creationTime",
          "currency",
          "expiryTime",
          "memo",
          "paymentAddr",
          "paymentHash"
        ],
        "type": "object",
        "properties": {
          "paymentHash": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "paymentAddr": {
            "type": "string",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "nullable": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PaymentRequestRecordResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRequestRecord"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentStatus": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "InFlight",
          "Succeeded",
          "Failed",
          "Initiated"
        ],
        "x-ms-enum": {
          "name": "PaymentStatus",
          "modelAsString": false,
          "values": [
            {
              "value": 1,
              "name": "InFlight"
            },
            {
              "value": 2,
              "name": "Succeeded"
            },
            {
              "value": 3,
              "name": "Failed"
            },
            {
              "value": 4,
              "name": "Initiated"
            }
          ]
        }
      },
      "PaymentStatusChanged": {
        "required": [
          "failureReason",
          "newStatus",
          "paymentHash"
        ],
        "type": "object",
        "properties": {
          "paymentHash": {
            "type": "string",
            "nullable": true
          },
          "newStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentStatus"
              }
            ],
            "x-enumNames": [
              "InFlight",
              "Succeeded",
              "Failed",
              "Initiated"
            ],
            "x-ms-enum": {
              "name": "PaymentStatus",
              "modelAsString": false,
              "values": [
                {
                  "value": 1,
                  "name": "InFlight"
                },
                {
                  "value": 2,
                  "name": "Succeeded"
                },
                {
                  "value": 3,
                  "name": "Failed"
                },
                {
                  "value": 4,
                  "name": "Initiated"
                }
              ]
            }
          },
          "failureReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentFailureReason"
              }
            ],
            "x-enumNames": [
              "None",
              "Timeout",
              "NoRoute",
              "Error",
              "IncorrectPaymentDetails",
              "InsufficientBalance",
              "Canceled",
              "EmptyReturnStream",
              "InvoiceAlreadySettled",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched"
            ],
            "x-ms-enum": {
              "name": "PaymentFailureReason",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "None"
                },
                {
                  "value": 1,
                  "name": "Timeout"
                },
                {
                  "value": 2,
                  "name": "NoRoute"
                },
                {
                  "value": 3,
                  "name": "Error"
                },
                {
                  "value": 4,
                  "name": "IncorrectPaymentDetails"
                },
                {
                  "value": 5,
                  "name": "InsufficientBalance"
                },
                {
                  "value": 6,
                  "name": "Canceled"
                },
                {
                  "value": 101,
                  "name": "EmptyReturnStream"
                },
                {
                  "value": 102,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 103,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 104,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 105,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 106,
                  "name": "FiatNotPaidOrMismatched"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "PayoutRecord": {
        "required": [
          "bitcoinAddress",
          "creationTime",
          "numConfirmations",
          "payoutFee",
          "payoutId",
          "satoshis",
          "state",
          "tx"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "type": "string",
            "format": "uuid"
          },
          "bitcoinAddress": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutState"
              }
            ],
            "x-enumNames": [
              "Open",
              "Sending",
              "Sent",
              "Failure"
            ],
            "x-ms-enum": {
              "name": "PayoutState",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Open"
                },
                {
                  "value": 1,
                  "name": "Sending"
                },
                {
                  "value": 2,
                  "name": "Sent"
                },
                {
                  "value": 3,
                  "name": "Failure"
                }
              ]
            }
          },
          "satoshis": {
            "type": "integer",
            "format": "int64"
          },
          "payoutFee": {
            "type": "integer",
            "format": "int64"
          },
          "tx": {
            "type": "string",
            "nullable": true
          },
          "numConfirmations": {
            "type": "integer",
            "format": "int32"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PayoutRecordArrayResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayoutRecord"
            },
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayoutRecordResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutRecord"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayoutState": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "Open",
          "Sending",
          "Sent",
          "Failure"
        ],
        "x-ms-enum": {
          "name": "PayoutState",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "Open"
            },
            {
              "value": 1,
              "name": "Sending"
            },
            {
              "value": 2,
              "name": "Sent"
            },
            {
              "value": 3,
              "name": "Failure"
            }
          ]
        }
      },
      "PayoutStateChanged": {
        "required": [
          "newState",
          "payoutFee",
          "payoutId"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "type": "string",
            "format": "uuid"
          },
          "newState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutState"
              }
            ],
            "x-enumNames": [
              "Open",
              "Sending",
              "Sent",
              "Failure"
            ],
            "x-ms-enum": {
              "name": "PayoutState",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Open"
                },
                {
                  "value": 1,
                  "name": "Sending"
                },
                {
                  "value": 2,
                  "name": "Sent"
                },
                {
                  "value": 3,
                  "name": "Failure"
                }
              ]
            }
          },
          "payoutFee": {
            "type": "integer",
            "format": "int64"
          },
          "tx": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Resolution": {
        "type": "object",
        "properties": {
          "resolutionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResolutionType"
              }
            ],
            "x-enumNames": [
              "TypeUnknown",
              "Anchor",
              "IncomingHtlc",
              "OutgoingHtlc",
              "Commit"
            ],
            "x-ms-enum": {
              "name": "ResolutionType",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "TypeUnknown"
                },
                {
                  "value": 1,
                  "name": "Anchor"
                },
                {
                  "value": 2,
                  "name": "IncomingHtlc"
                },
                {
                  "value": 3,
                  "name": "OutgoingHtlc"
                },
                {
                  "value": 4,
                  "name": "Commit"
                }
              ]
            }
          },
          "outcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResolutionOutcome"
              }
            ],
            "x-enumNames": [
              "OutcomeUnknown",
              "Claimed",
              "Unclaimed",
              "Abandoned",
              "FirstStage",
              "Timeout"
            ],
            "x-ms-enum": {
              "name": "ResolutionOutcome",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "OutcomeUnknown"
                },
                {
                  "value": 1,
                  "name": "Claimed"
                },
                {
                  "value": 2,
                  "name": "Unclaimed"
                },
                {
                  "value": 3,
                  "name": "Abandoned"
                },
                {
                  "value": 4,
                  "name": "FirstStage"
                },
                {
                  "value": 5,
                  "name": "Timeout"
                }
              ]
            }
          },
          "outpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OutPoint"
              }
            ],
            "nullable": true
          },
          "amountSat": {
            "type": "integer",
            "format": "int64"
          },
          "sweepTxid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResolutionOutcome": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "OutcomeUnknown",
          "Claimed",
          "Unclaimed",
          "Abandoned",
          "FirstStage",
          "Timeout"
        ],
        "x-ms-enum": {
          "name": "ResolutionOutcome",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "OutcomeUnknown"
            },
            {
              "value": 1,
              "name": "Claimed"
            },
            {
              "value": 2,
              "name": "Unclaimed"
            },
            {
              "value": 3,
              "name": "Abandoned"
            },
            {
              "value": 4,
              "name": "FirstStage"
            },
            {
              "value": 5,
              "name": "Timeout"
            }
          ]
        }
      },
      "ResolutionType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32",
        "x-enumNames": [
          "TypeUnknown",
          "Anchor",
          "IncomingHtlc",
          "OutgoingHtlc",
          "Commit"
        ],
        "x-ms-enum": {
          "name": "ResolutionType",
          "modelAsString": false,
          "values": [
            {
              "value": 0,
              "name": "TypeUnknown"
            },
            {
              "value": 1,
              "name": "Anchor"
            },
            {
              "value": 2,
              "name": "IncomingHtlc"
            },
            {
              "value": 3,
              "name": "OutgoingHtlc"
            },
            {
              "value": 4,
              "name": "Commit"
            }
          ]
        }
      },
      "Result": {
        "type": "object",
        "properties": {
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RouteFeeRecord": {
        "required": [
          "failureReason",
          "routingFeeMsat",
          "timeLockDelay"
        ],
        "type": "object",
        "properties": {
          "routingFeeMsat": {
            "type": "integer",
            "format": "int64"
          },
          "timeLockDelay": {
            "type": "integer",
            "format": "int64"
          },
          "failureReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentFailureReason"
              }
            ],
            "x-enumNames": [
              "None",
              "Timeout",
              "NoRoute",
              "Error",
              "IncorrectPaymentDetails",
              "InsufficientBalance",
              "Canceled",
              "EmptyReturnStream",
              "InvoiceAlreadySettled",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched"
            ],
            "x-ms-enum": {
              "name": "PaymentFailureReason",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "None"
                },
                {
                  "value": 1,
                  "name": "Timeout"
                },
                {
                  "value": 2,
                  "name": "NoRoute"
                },
                {
                  "value": 3,
                  "name": "Error"
                },
                {
                  "value": 4,
                  "name": "IncorrectPaymentDetails"
                },
                {
                  "value": 5,
                  "name": "InsufficientBalance"
                },
                {
                  "value": 6,
                  "name": "Canceled"
                },
                {
                  "value": 101,
                  "name": "EmptyReturnStream"
                },
                {
                  "value": 102,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 103,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 104,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 105,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 106,
                  "name": "FiatNotPaidOrMismatched"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "RouteFeeRecordResult": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RouteFeeRecord"
              }
            ],
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionRecord": {
        "required": [
          "bitcoinAddress",
          "creationTime",
          "numConfirmations",
          "satoshis",
          "tx"
        ],
        "type": "object",
        "properties": {
          "bitcoinAddress": {
            "type": "string",
            "nullable": true
          },
          "satoshis": {
            "type": "integer",
            "format": "int64"
          },
          "tx": {
            "type": "string",
            "nullable": true
          },
          "numConfirmations": {
            "type": "integer",
            "format": "int32"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TransactionRecordArrayResult": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionRecord"
            },
            "nullable": true
          },
          "errorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LNDWalletErrorCode"
              }
            ],
            "x-enumNames": [
              "Ok",
              "InvalidToken",
              "NotEnoughFunds",
              "UnknownPayment",
              "UnknownInvoice",
              "InvoiceAlreadyCancelled",
              "InvoiceAlreadyAccepted",
              "InvoiceAlreadySettled",
              "InvoiceNotAccepted",
              "AlreadyPayed",
              "PayoutNotOpened",
              "PayoutAlreadySent",
              "OperationFailed",
              "AccessDenied",
              "FeeLimitTooSmall",
              "FiatNotPaidOrMismatched",
              "FiatCountryCurrencyNotSupported"
            ],
            "x-ms-enum": {
              "name": "LNDWalletErrorCode",
              "modelAsString": false,
              "values": [
                {
                  "value": 0,
                  "name": "Ok"
                },
                {
                  "value": 1,
                  "name": "InvalidToken"
                },
                {
                  "value": 2,
                  "name": "NotEnoughFunds"
                },
                {
                  "value": 3,
                  "name": "UnknownPayment"
                },
                {
                  "value": 4,
                  "name": "UnknownInvoice"
                },
                {
                  "value": 5,
                  "name": "InvoiceAlreadyCancelled"
                },
                {
                  "value": 6,
                  "name": "InvoiceAlreadyAccepted"
                },
                {
                  "value": 7,
                  "name": "InvoiceAlreadySettled"
                },
                {
                  "value": 8,
                  "name": "InvoiceNotAccepted"
                },
                {
                  "value": 9,
                  "name": "AlreadyPayed"
                },
                {
                  "value": 10,
                  "name": "PayoutNotOpened"
                },
                {
                  "value": 11,
                  "name": "PayoutAlreadySent"
                },
                {
                  "value": 12,
                  "name": "OperationFailed"
                },
                {
                  "value": 13,
                  "name": "AccessDenied"
                },
                {
                  "value": 14,
                  "name": "FeeLimitTooSmall"
                },
                {
                  "value": 15,
                  "name": "FiatNotPaidOrMismatched"
                },
                {
                  "value": 16,
                  "name": "FiatCountryCurrencyNotSupported"
                }
              ]
            }
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}